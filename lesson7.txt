1) представление, которое для каждого курса выводит название, номер последнего потока, дату начала обучения последнего потока и среднюю успеваемость курса по всем потокам.

sqlite> create view actual_info_courses as select courses.theme, streams.started_at,avg(grades.performance) from streams inner join courses on courses.id=streams.course_id left join grades on streams.id=grades.streams_id group by courses.theme having streams.started_at=(select max(streams.started_at));

sqlite> select * from actual_info_courses;
theme|started_at|avg(grades.performance)
Linux. Рабочая станция|2020-08-18|4.7
Базы данных|2020-12-03|4.85
Основы Python|2020-10-02|4.9

2) Удаление из базы данных информации, которая относится к преподавателю с идентификатором, равным 3. Используйте транзакцию.
sqlite> begin transaction;
sqlite> delete from teachers where id=3;
sqlite> delete from grades where teacher_id=3;
sqlite> commit;
sqlite> select * from grades;
teacher_id|streams_id|performance
2|2.0|4.9
1|3.0|4.8
1|4.0|4.9
sqlite> select * from teachers;
id|name|surname|email
1|Николай|Савельев|saveliev.n@mai.ru
2|Наталья|Петрова|petrova.n@yandex.ru
4|Учитель|Новый|all.goal.e@google.com
sqlite>

3) триггер для таблицы успеваемости, который проверяет значение успеваемости на соответствие диапазону чисел от 0 до 5 включительно.

CREATE TRIGGER check_performance_format BEFORE INSERT
ON grades
BEGIN
SELECT CASE 
WHEN    
(NEW.performance <1 OR NEW.performance >5)
THEN
RAISE(ABORT, 'Wrong range of performance!')
END;
END;
sqlite> 
sqlite> .schema grades
CREATE TABLE IF NOT EXISTS "grades" (
teacher_id INTEGER NOT NULL,
streams_id REAL NOT NULL,
performance REAL NOT NULL,
PRIMARY KEY (teacher_id,streams_id),
FOREIGN KEY (teacher_id) REFERENCES teachers(iD),
FOREIGN KEY (streams_id) REFERENCES streams(id)
);
CREATE TRIGGER check_performance_format BEFORE INSERT
ON grades
BEGIN
SELECT CASE
WHEN
(NEW.performance <1 OR NEW.performance >5)
THEN
RAISE(ABORT, 'Wrong range of performance!')
END;
END;
sqlite> .mode column
sqlite> select * from grades
   ...> ;
teacher_id  streams_id  performance
----------  ----------  -----------
2           2.0         4.9
1           3.0         4.8
1           4.0         4.9

sqlite>  INSERT INTO grades VALUES(1,4.0,5.9000000000000003552);
Error: stepping, Wrong range of performance! (19)
sqlite>

4) триггер для таблицы потоков, который проверяет, что дата начала потока больше текущей даты, а номер потока имеет наибольшее значение среди существующих номеров. При невыполнении условий необходимо вызвать ошибку с информативным сообщением.



sqlite> .schema streams
CREATE TABLE streams(
id INTEGER PRIMARY KEY AUTOINCREMENT,
course_id INTEGER NOT NULL,
number INTEGER NOT NULL,
started_at TEXT NOT NULL,
students_amount INTEGER,
FOREIGN KEY (course_id) REFERENCES courses(id));
CREATE TRIGGER check_num_and_date_of_streams BEFORE INSERT
ON streams
BEGIN
SELECT CASE
WHEN
NEW.number<=(SELECT max(number) from streams)
THEN
RAISE(ABORT, 'Wrong range num of streams!')
WHEN
(NEW.started_at<=date('now'))
THEN
RAISE(ABORT, 'Pls check started_at with today!')
END;
END;
sqlite>

sqlite> INSERT INTO streams(id,course_id,number,started_at,students_amount) VALUES(54,1,250,'2020-12-03',41);
Error: stepping, Pls check started_at with today! (19)
sqlite> INSERT INTO streams(id,course_id,number,started_at,students_amount) VALUES(5,1,200,'2022-12-03',41);
Error: stepping, Wrong range num of streams! (19)
sqlite>

